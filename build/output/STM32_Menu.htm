<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\output\STM32_Menu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\output\STM32_Menu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Fri Jun 20 23:58:17 2025
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Application::Start() &rArr; create_board() &rArr; SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object() &rArr; TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">TP_Init()</a> from touch.o(.text._Z7TP_Initv) referenced from touch.o(.data.tp_dev)
 <LI><a href="#[5b]">TP_Scan(unsigned char)</a> from touch.o(.text._Z7TP_Scanh) referenced from touch.o(.data.tp_dev)
 <LI><a href="#[5c]">TP_Adjust()</a> from touch.o(.text._Z9TP_Adjustv) referenced from touch.o(.data.tp_dev)
 <LI><a href="#[4b]">Application::~Application()</a> from application.o(.text._ZN11ApplicationD2Ev) referenced 2 times from main.o(.text.main)
 <LI><a href="#[4f]">SchoolSTM32F103VCT6::GetKey()</a> from school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT66GetKeyEv) referenced from school-stm32f103vct6.o(.rodata._ZTV19SchoolSTM32F103VCT6)
 <LI><a href="#[4e]">SchoolSTM32F103VCT6::~SchoolSTM32F103VCT6__deallocating()</a> from school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT6D0Ev) referenced from school-stm32f103vct6.o(.rodata._ZTV19SchoolSTM32F103VCT6)
 <LI><a href="#[52]">Key::~Key__sub_object()</a> from board.o(.text._ZN3KeyD2Ev) referenced from board.o(.rodata._ZTV5NoKey)
 <LI><a href="#[51]">Board::GetKey()</a> from board.o(.text._ZN5Board6GetKeyEv) referenced from board.o(.rodata._ZTV5Board)
 <LI><a href="#[50]">Board::~Board__deallocating()</a> from board.o(.text._ZN5BoardD0Ev) referenced from board.o(.rodata._ZTV5Board)
 <LI><a href="#[4d]">Board::~Board__sub_object()</a> from board.o(.text._ZN5BoardD2Ev) referenced from school-stm32f103vct6.o(.rodata._ZTV19SchoolSTM32F103VCT6)
 <LI><a href="#[4d]">Board::~Board__sub_object()</a> from board.o(.text._ZN5BoardD2Ev) referenced from board.o(.rodata._ZTV5Board)
 <LI><a href="#[54]">NoKey::ReadKey()</a> from board.o(.text._ZN5NoKey7ReadKeyEv) referenced from board.o(.rodata._ZTV5NoKey)
 <LI><a href="#[55]">NoKey::ReadKeyN()</a> from board.o(.text._ZN5NoKey8ReadKeyNEv) referenced from board.o(.rodata._ZTV5NoKey)
 <LI><a href="#[53]">NoKey::~NoKey__deallocating()</a> from board.o(.text._ZN5NoKeyD0Ev) referenced from board.o(.rodata._ZTV5NoKey)
 <LI><a href="#[58]">KeyBoard::ReadKey()</a> from key_board.o(.text._ZN8KeyBoard7ReadKeyEv) referenced from key_board.o(.rodata._ZTV8KeyBoard)
 <LI><a href="#[59]">KeyBoard::ReadKeyN()</a> from key_board.o(.text._ZN8KeyBoard8ReadKeyNEv) referenced from key_board.o(.rodata._ZTV8KeyBoard)
 <LI><a href="#[57]">KeyBoard::~KeyBoard__deallocating()</a> from key_board.o(.text._ZN8KeyBoardD0Ev) referenced from key_board.o(.rodata._ZTV8KeyBoard)
 <LI><a href="#[4a]">KeyBoard::~KeyBoard()</a> from key_board.o(.text._ZN8KeyBoardD2Ev) referenced 2 times from school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT66GetKeyEv)
 <LI><a href="#[56]">KeyBoard::~KeyBoard__sub_object()</a> from key_board.o(.text._ZN8KeyBoardD2Ev) referenced from key_board.o(.rodata._ZTV8KeyBoard)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">_atexit_mutex</a> from main.o(.text._atexit_mutex) referenced 2 times from aeabi_atexit.o(.text)
 <LI><a href="#[4c]">fputc</a> from bsp_usart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[46]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[110]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[60]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[111]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::GetKey()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata()
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata()
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[113]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_atexit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[66]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[65]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[75]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[6b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[116]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[117]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[61]"></a>__cxa_finalize</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>GPIO_Init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::KeyBoard()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice(unsigned char)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_dz_GPIOInit()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_Dir_Config(unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[82]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::ReadKeyN()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::ReadKey()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice(unsigned char)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::KeyBoard()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::ReadKeyN()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::ReadKey()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte(unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice(unsigned char)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_dz_GPIOInit()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzFlash()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segFlash()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_Dir_Config(unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
</UL>

<P><STRONG><a name="[84]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::ReadKeyN()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte(unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice(unsigned char)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzFlash()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segFlash()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::ReadKeyN()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY(unsigned char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowChar(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_SetPos(unsigned char, unsigned char)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[85]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[81]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::KeyBoard()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice(unsigned char)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_dz_GPIOInit()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[7f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9f]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2(unsigned short*, unsigned short*)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[a9]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>

<P><STRONG><a name="[ac]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>

<P><STRONG><a name="[ab]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>

<P><STRONG><a name="[c2]"></a>SPI_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f10x_spi.o(.text.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus()
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[d7]"></a>TIM_CCxCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_CCxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_Dir_Config(unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
</UL>

<P><STRONG><a name="[d2]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[d3]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[cb]"></a>TIM_OC1Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[cc]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[cd]"></a>TIM_OC2Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[ce]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[cf]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[d0]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[d5]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
</UL>

<P><STRONG><a name="[d6]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
</UL>

<P><STRONG><a name="[97]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRGBColor(unsigned int)
</UL>

<P><STRONG><a name="[98]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRGBColor(unsigned int)
</UL>

<P><STRONG><a name="[99]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRGBColor(unsigned int)
</UL>

<P><STRONG><a name="[ca]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
</UL>

<P><STRONG><a name="[88]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[c0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte(USART_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[87]"></a>USART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[7e]"></a>USART_Init</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f10x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
</UL>

<P><STRONG><a name="[bf]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte(USART_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ESP_Config()</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, bsp_espxx.o(.text._Z10ESP_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ESP_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[89]"></a>ee_CheckOk()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_i2c_ee.o(.text._Z10ee_CheckOkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ee_CheckOk() &rArr; i2c_CheckDevice(unsigned char) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[8c]"></a>gui_circle(int, int, unsigned short, int, int)</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, bsp_gui.o(.text._Z10gui_circleiitii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gui_circle(int, int, unsigned short, int, int) &rArr; _draw_circle_8(int, int, int, int, unsigned short) &rArr; LCD_SetCursor(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8(int, int, int, int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[8e]"></a>oled_Clear()</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, bsp_oled.o(.text._Z10oled_Clearv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oled_Clear() &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Display()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_Init()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::About_Init()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::FanControl_Init()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Timer_Init()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Update()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
</UL>

<P><STRONG><a name="[91]"></a>JQ8900setup()</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bsp_jq8900.o(.text._Z11JQ8900setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = JQ8900setup() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte(USART_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[94]"></a>LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char)</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, bsp_gui.o(.text._Z11LCD_ShowNumttjhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[96]"></a>SetRGBColor(unsigned int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_led.o(.text._Z11SetRGBColorj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetRGBColor(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[9a]"></a>TP_Read_XOY(unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, touch.o(.text._Z11TP_Read_XOYh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TP_Read_XOY(unsigned char) &rArr; bsp_spiRead1() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs(unsigned int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2(unsigned short*, unsigned short*)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[9d]"></a>TP_Read_XY2(unsigned short*, unsigned short*)</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, touch.o(.text._Z11TP_Read_XY2PtS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TP_Read_XY2(unsigned short*, unsigned short*) &rArr; TP_Read_XOY(unsigned char) &rArr; bsp_spiRead1() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY(unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
</UL>

<P><STRONG><a name="[a0]"></a>i2c_WaitAck()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text._Z11i2c_WaitAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_WaitAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[a3]"></a>oled_SetPos(unsigned char, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, bsp_oled.o(.text._Z11oled_SetPoshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowChar(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[a4]"></a>LCD_DrawLine(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, bsp_gui.o(.text._Z12LCD_DrawLinetttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_DrawLine(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[95]"></a>LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bsp_gui.o(.text._Z12LCD_ShowChartttthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString(unsigned short, unsigned short, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[fc]"></a>SysTick_Init()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, bsp_systick.o(.text._Z12SysTick_Initv))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[a8]"></a>USART_Config()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bsp_usart.o(.text._Z12USART_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[9e]"></a>bsp_SPI_Init(unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp_spi_bus.o(.text._Z12bsp_SPI_Initt))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2(unsigned short*, unsigned short*)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[9c]"></a>bsp_spiRead1()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_spi_bus.o(.text._Z12bsp_spiRead1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_spiRead1() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY(unsigned char)
</UL>

<P><STRONG><a name="[ad]"></a>create_board()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, school-stm32f103vct6.o(.text._Z12create_boardv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = create_board() &rArr; SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object() &rArr; TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
</UL>

<P><STRONG><a name="[b0]"></a>ee_ReadBytes(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_i2c_ee.o(.text._Z12ee_ReadBytesPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ee_ReadBytes(unsigned char*, unsigned short, unsigned short) &rArr; i2c_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte(unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata()
</UL>

<P><STRONG><a name="[b4]"></a>i2c_ReadByte()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text._Z12i2c_ReadBytev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[b2]"></a>i2c_SendByte(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_i2c_gpio.o(.text._Z12i2c_SendByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[b6]"></a>oled_ShowNum(unsigned char, unsigned char, unsigned int, unsigned char, unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, bsp_oled.o(.text._Z12oled_ShowNumhhjhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = oled_ShowNum(unsigned char, unsigned char, unsigned int, unsigned char, unsigned char) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowChar(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Timer_Update()
</UL>

<P><STRONG><a name="[a5]"></a>LCD_DrawPoint(unsigned short, unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_lcd.o(.text._Z13LCD_DrawPointtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_test()
</UL>

<P><STRONG><a name="[b8]"></a>LCD_SetCursor(unsigned short, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_lcd.o(.text._Z13LCD_SetCursortt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_SetCursor(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8(int, int, int, int, unsigned short)
</UL>

<P><STRONG><a name="[90]"></a>bsp_spiWrite0(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_spi_bus.o(.text._Z13bsp_spiWrite0h))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY(unsigned char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowChar(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_SetPos(unsigned char, unsigned char)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzFlash()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segFlash()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
</UL>

<P><STRONG><a name="[b9]"></a>ee_WriteBytes(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bsp_i2c_ee.o(.text._Z13ee_WriteBytesPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ee_WriteBytes(unsigned char*, unsigned short, unsigned short) &rArr; i2c_WaitAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte(unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata()
</UL>

<P><STRONG><a name="[b7]"></a>oled_ShowChar(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, bsp_oled.o(.text._Z13oled_ShowCharhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_SetPos(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowNum(unsigned char, unsigned char, unsigned int, unsigned char, unsigned char)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowAsciiString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[ba]"></a>GUI_DrawFont16(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, bsp_gui.o(.text._Z14GUI_DrawFont16ttttPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DrawFont16(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[bb]"></a>GUI_DrawFont24(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, bsp_gui.o(.text._Z14GUI_DrawFont24ttttPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DrawFont24(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[bc]"></a>GUI_DrawFont32(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, bsp_gui.o(.text._Z14GUI_DrawFont32ttttPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DrawFont32(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a6]"></a>LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 512 bytes, Stack size 40 bytes, bsp_lcd.o(.text._Z14LCD_SetWindowstttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor(unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
</UL>

<P><STRONG><a name="[bd]"></a>LCD_ShowString(unsigned short, unsigned short, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, bsp_gui.o(.text._Z14LCD_ShowStringtthPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_ShowString(unsigned short, unsigned short, unsigned char, unsigned char*, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[be]"></a>TP_Get_Adjdata()</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, touch.o(.text._Z14TP_Get_Adjdatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TP_Get_Adjdata() &rArr; ee_ReadBytes(unsigned char*, unsigned short, unsigned short) &rArr; i2c_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[93]"></a>Usart_SendByte(USART_TypeDef*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_usart.o(.text._Z14Usart_SendByteP13USART_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart_SendByte(USART_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
</UL>

<P><STRONG><a name="[8d]"></a>_draw_circle_8(int, int, int, int, unsigned short)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, bsp_gui.o(.text._Z14_draw_circle_8iiiit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _draw_circle_8(int, int, int, int, unsigned short) &rArr; LCD_SetCursor(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor(unsigned short, unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle(int, int, unsigned short, int, int)
</UL>

<P><STRONG><a name="[c1]"></a>bsp_InitSPIBus()</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, bsp_spi_bus.o(.text._Z14bsp_InitSPIBusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_InitSPIBus() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[c3]"></a>LED_GPIO_Config()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp_led.o(.text._Z15LED_GPIO_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_GPIO_Config() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[c4]"></a>TP_Save_Adjdata()</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, touch.o(.text._Z15TP_Save_Adjdatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TP_Save_Adjdata() &rArr; ee_WriteBytes(unsigned char*, unsigned short, unsigned short) &rArr; i2c_WaitAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[8a]"></a>i2c_CheckDevice(unsigned char)</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, bsp_i2c_gpio.o(.text._Z15i2c_CheckDeviceh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_CheckDevice(unsigned char) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_CheckOk()
</UL>

<P><STRONG><a name="[c7]"></a>oled_ShowString(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, bsp_oled.o(.text._Z15oled_ShowStringhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowChar(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_SetPos(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_Update()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Display()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_Init()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::About_Init()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::FanControl_Init()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Timer_Init()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Update()
</UL>

<P><STRONG><a name="[c8]"></a>seg_dz_GPIOInit()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsp_segdz.o(.text._Z15seg_dz_GPIOInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = seg_dz_GPIOInit() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[c9]"></a>ADVANCE_TIM_Init()</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, bsp_advancetim.o(.text._Z16ADVANCE_TIM_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADVANCE_TIM_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[d4]"></a>GENERAL_TIM_Init()</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, bsp_generaltim.o(.text._Z16GENERAL_TIM_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GENERAL_TIM_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[e1]"></a>SysTick_Delay_Ms(unsigned int)</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, bsp_systick.o(.text._Z16SysTick_Delay_Msj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Delay_Ms(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
</UL>

<P><STRONG><a name="[d8]"></a>TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, touch.o(.text._Z16TP_Adj_Info_Showttttttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString(unsigned short, unsigned short, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[d9]"></a>DCMotor_Dir_Config(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp_generaltim.o(.text._Z18DCMotor_Dir_Configh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DCMotor_Dir_Config(unsigned char) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[a7]"></a>LCD_WriteData_16Bit(unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_lcd.o(.text._Z19LCD_WriteData_16Bitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_WriteData_16Bit(unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8(int, int, int, int, unsigned short)
</UL>

<P><STRONG><a name="[da]"></a>oled_ShowAsciiString(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp_oled.o(.text._Z20oled_ShowAsciiStringhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oled_ShowAsciiString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowChar(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Timer_Update()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Display()
</UL>

<P><STRONG><a name="[db]"></a>DelayMs(unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, util.o(.text._Z7DelayMsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DelayMs(unsigned int) &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[9b]"></a>DelayUs(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, util.o(.text._Z7DelayUsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayUs(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY(unsigned char)
</UL>

<P><STRONG><a name="[5a]"></a>TP_Init()</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, touch.o(.text._Z7TP_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs(unsigned int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY(unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPI_Init(unsigned short)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data.tp_dev)
</UL>
<P><STRONG><a name="[5b]"></a>TP_Scan(unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, touch.o(.text._Z7TP_Scanh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TP_Scan(unsigned char) &rArr; TP_Read_XY2(unsigned short*, unsigned short*) &rArr; TP_Read_XOY(unsigned char) &rArr; bsp_spiRead1() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2(unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_test()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data.tp_dev)
</UL>
<P><STRONG><a name="[de]"></a>TP_test()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, touch.o(.text._Z7TP_testv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TP_test() &rArr; TP_Scan(unsigned char) &rArr; TP_Read_XY2(unsigned short*, unsigned short*) &rArr; TP_Read_XOY(unsigned char) &rArr; bsp_spiRead1() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan(unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
</UL>

<P><STRONG><a name="[df]"></a>dzFlash()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bsp_segdz.o(.text._Z7dzFlashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dzFlash() &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
</UL>

<P><STRONG><a name="[b5]"></a>i2c_Ack()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(.text._Z7i2c_Ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[e0]"></a>LCD_Init()</STRONG> (Thumb, 2890 bytes, Stack size 24 bytes, bsp_lcd.o(.text._Z8LCD_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Init() &rArr; LCD_Clear(unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Delay_Ms(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[e2]"></a>Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, bsp_gui.o(.text._Z8Show_StrttttPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
</UL>

<P><STRONG><a name="[b3]"></a>i2c_NAck()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(.text._Z8i2c_NAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[8b]"></a>i2c_Stop()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(.text._Z8i2c_Stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_CheckOk()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[e3]"></a>segFlash()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bsp_segdz.o(.text._Z8segFlashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = segFlash() &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
</UL>

<P><STRONG><a name="[e4]"></a>ADCx_Init()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_adc.o(.text._Z9ADCx_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADCx_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[dd]"></a>LCD_Clear(unsigned short)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, bsp_lcd.o(.text._Z9LCD_Cleart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_Clear(unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
</UL>

<P><STRONG><a name="[5c]"></a>TP_Adjust()</STRONG> (Thumb, 3048 bytes, Stack size 104 bytes, touch.o(.text._Z9TP_Adjustv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs(unsigned int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString(unsigned short, unsigned short, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle(int, int, unsigned short, int, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint(unsigned short, unsigned short)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data.tp_dev)
</UL>
<P><STRONG><a name="[b1]"></a>i2c_Start()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_i2c_gpio.o(.text._Z9i2c_Startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_Start()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_ReadBytes(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_WriteBytes(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[eb]"></a>oled_Init()</STRONG> (Thumb, 1578 bytes, Stack size 24 bytes, bsp_oled.o(.text._Z9oled_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = oled_Init() &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_SetPos(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Delay_Ms(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[ec]"></a>Application::About_Init()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, application.o(.text._ZN11Application10About_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Application::About_Init() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[ed]"></a>Application::Timer_Init()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, application.o(.text._ZN11Application10Timer_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Application::Timer_Init() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[ee]"></a>Application::Menu_Update()</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, application.o(.text._ZN11Application11Menu_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Application::Menu_Update() &rArr; Application::Menu_Display() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Timer_Update()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_Update()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Display()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
</UL>

<P><STRONG><a name="[ef]"></a>Application::Menu_Display()</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, application.o(.text._ZN11Application12Menu_DisplayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Application::Menu_Display() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowAsciiString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Update()
</UL>

<P><STRONG><a name="[f1]"></a>Application::Timer_Update()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, application.o(.text._ZN11Application12Timer_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Application::Timer_Update() &rArr; oled_ShowNum(unsigned char, unsigned char, unsigned int, unsigned char, unsigned char) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowNum(unsigned char, unsigned char, unsigned int, unsigned char, unsigned char)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowAsciiString(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Update()
</UL>

<P><STRONG><a name="[f2]"></a>Application::MainEventLoop()</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, application.o(.text._ZN11Application13MainEventLoopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Application::MainEventLoop() &rArr; create_board() &rArr; SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object() &rArr; TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Update()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_test()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzFlash()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segFlash()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_board()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
</UL>

<P><STRONG><a name="[f3]"></a>Application::Menu_HandleKey(unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, application.o(.text._ZN11Application14Menu_HandleKeyEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Application::Menu_HandleKey(unsigned char) &rArr; Application::About_Init() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_Init()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::About_Init()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::FanControl_Init()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Timer_Init()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::LEDControl_HandleKey(unsigned char)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_Dir_Config(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
</UL>

<P><STRONG><a name="[f7]"></a>Application::FanControl_Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(.text._ZN11Application15FanControl_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Application::FanControl_Init() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[f8]"></a>Application::LEDControl_Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(.text._ZN11Application15LEDControl_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Application::LEDControl_Init() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[f0]"></a>Application::LEDControl_Update()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, application.o(.text._ZN11Application17LEDControl_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Application::LEDControl_Update() &rArr; oled_ShowString(unsigned char, unsigned char, unsigned char*) &rArr; oled_ShowChar(unsigned char, unsigned char, unsigned char) &rArr; oled_SetPos(unsigned char, unsigned char) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_ShowString(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_Update()
</UL>

<P><STRONG><a name="[f6]"></a>Application::LEDControl_HandleKey(unsigned char)</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, application.o(.text._ZN11Application20LEDControl_HandleKeyEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Application::LEDControl_HandleKey(unsigned char) &rArr; SetRGBColor(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRGBColor(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Menu_HandleKey(unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>Application::Start()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, application.o(.text._ZN11Application5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Application::Start() &rArr; create_board() &rArr; SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object() &rArr; TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_board()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Clear()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>Application::Application()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, application.o(.text._ZN11ApplicationC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>Application::Application__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, application.o(.text._ZN11ApplicationC2Ev), UNUSED)

<P><STRONG><a name="[4b]"></a>Application::~Application()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text._ZN11ApplicationD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[11a]"></a>Application::~Application__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text._ZN11ApplicationD2Ev), UNUSED)

<P><STRONG><a name="[4f]"></a>SchoolSTM32F103VCT6::GetKey()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT66GetKeyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SchoolSTM32F103VCT6::GetKey() &rArr; KeyBoard::KeyBoard() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::KeyBoard()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> school-stm32f103vct6.o(.rodata._ZTV19SchoolSTM32F103VCT6)
</UL>
<P><STRONG><a name="[af]"></a>SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT6C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object() &rArr; TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::Board__sub_object()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPIBus()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::KeyBoard()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_CheckOk()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Init()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_dz_GPIOInit()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRGBColor(unsigned int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Config()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JQ8900setup()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_board()
</UL>

<P><STRONG><a name="[4e]"></a>SchoolSTM32F103VCT6::~SchoolSTM32F103VCT6__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT6D0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SchoolSTM32F103VCT6::~SchoolSTM32F103VCT6__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> school-stm32f103vct6.o(.rodata._ZTV19SchoolSTM32F103VCT6)
</UL>
<P><STRONG><a name="[52]"></a>Key::~Key__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text._ZN3KeyD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata._ZTV5NoKey)
</UL>
<P><STRONG><a name="[51]"></a>Board::GetKey()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, board.o(.text._ZN5Board6GetKeyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Board::GetKey() &rArr; __cxa_guard_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata._ZTV5Board)
</UL>
<P><STRONG><a name="[11b]"></a>Board::Board()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text._ZN5BoardC2Ev), UNUSED)

<P><STRONG><a name="[fb]"></a>Board::Board__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text._ZN5BoardC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[50]"></a>Board::~Board__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(.text._ZN5BoardD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board::~Board__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata._ZTV5Board)
</UL>
<P><STRONG><a name="[4d]"></a>Board::~Board__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text._ZN5BoardD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> board.o(.rodata._ZTV5Board)
<LI> school-stm32f103vct6.o(.rodata._ZTV19SchoolSTM32F103VCT6)
</UL>
<P><STRONG><a name="[54]"></a>NoKey::ReadKey()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text._ZN5NoKey7ReadKeyEv))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata._ZTV5NoKey)
</UL>
<P><STRONG><a name="[55]"></a>NoKey::ReadKeyN()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text._ZN5NoKey8ReadKeyNEv))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata._ZTV5NoKey)
</UL>
<P><STRONG><a name="[53]"></a>NoKey::~NoKey__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(.text._ZN5NoKeyD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NoKey::~NoKey__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata._ZTV5NoKey)
</UL>
<P><STRONG><a name="[58]"></a>KeyBoard::ReadKey()</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, key_board.o(.text._ZN8KeyBoard7ReadKeyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyBoard::ReadKey()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board.o(.rodata._ZTV8KeyBoard)
</UL>
<P><STRONG><a name="[59]"></a>KeyBoard::ReadKeyN()</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, key_board.o(.text._ZN8KeyBoard8ReadKeyNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyBoard::ReadKeyN()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board.o(.rodata._ZTV8KeyBoard)
</UL>
<P><STRONG><a name="[fa]"></a>KeyBoard::KeyBoard()</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, key_board.o(.text._ZN8KeyBoardC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KeyBoard::KeyBoard() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::GetKey()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
</UL>

<P><STRONG><a name="[11c]"></a>KeyBoard::KeyBoard__sub_object()</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, key_board.o(.text._ZN8KeyBoardC2Ev), UNUSED)

<P><STRONG><a name="[57]"></a>KeyBoard::~KeyBoard__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key_board.o(.text._ZN8KeyBoardD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyBoard::~KeyBoard__deallocating() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board.o(.rodata._ZTV8KeyBoard)
</UL>
<P><STRONG><a name="[4a]"></a>KeyBoard::~KeyBoard()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key_board.o(.text._ZN8KeyBoardD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> school-stm32f103vct6.o(.text._ZN19SchoolSTM32F103VCT66GetKeyEv)
</UL>
<P><STRONG><a name="[56]"></a>KeyBoard::~KeyBoard__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key_board.o(.text._ZN8KeyBoardD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> key_board.o(.rodata._ZTV8KeyBoard)
</UL>
<P><STRONG><a name="[fe]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, util.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[fd]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::~SchoolSTM32F103VCT6__deallocating()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoKey::~NoKey__deallocating()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::~Board__deallocating()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoard::~KeyBoard__deallocating()
</UL>

<P><STRONG><a name="[ae]"></a>operator new(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, util.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __aligned_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_board()
</UL>

<P><STRONG><a name="[11d]"></a>_atexit_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._atexit_init), UNUSED)

<P><STRONG><a name="[49]"></a>_atexit_mutex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._atexit_mutex))
<BR>[Address Reference Count : 2]<UL><LI> cxa_finalize.o(.text)
<LI> aeabi_atexit.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_usart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; Application::Start() &rArr; create_board() &rArr; SchoolSTM32F103VCT6::SchoolSTM32F103VCT6__sub_object() &rArr; TP_Init() &rArr; TP_Adjust() &rArr; TP_Adj_Info_Show(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_ShowNum(unsigned short, unsigned short, unsigned int, unsigned char, unsigned char) &rArr; LCD_ShowChar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; LCD_DrawPoint(unsigned short, unsigned short) &rArr; LCD_SetWindows(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; bsp_spiWrite0(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Application()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f4]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxa_guard_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::GetKey()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::GetKey()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchoolSTM32F103VCT6::GetKey()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::GetKey()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::Start()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.unlikely.abort_message))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[102]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util.o(.text.vApplicationStackOverflowHook), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[5d]"></a>vTaskSwitchContext</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>

<P><STRONG><a name="[103]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[aa]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiRead1()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spiWrite0(unsigned char)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application::MainEventLoop()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>

<P><STRONG><a name="[11f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[120]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[105]"></a>__aligned_malloc</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, malloca.o(i.__aligned_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ff]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloca.o(i.__free$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>

<P><STRONG><a name="[73]"></a>malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, malloca.o(i.__malloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = malloc &rArr; __aligned_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[121]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[122]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[123]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[dc]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs(unsigned int)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>

<P><STRONG><a name="[e5]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[106]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[104]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[109]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[108]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
